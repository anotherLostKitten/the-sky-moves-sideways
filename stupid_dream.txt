only true porcupine tree fans will get this epic reference
from math import cos,sin,pi
from subprocess import Popen,PIPE
def asg(l,v,i=0):
    l[i]=v
class Img:
    def __init__(self,r,c):
        self.c,self.r,self.img,self.lns,self.ln,self.s,self.oof=c,r,[0]*r*c,(lambda p:[[self.ln(r-round(p[i+1]/p[i+3]),round(p[i]/p[i+3]),r-round(p[i+5]/p[i+7]),round(p[i+4]/p[i+7]),16741235)for i in range(0,len(p),8)],self][1]),(lambda rs,cs,rf,cf,v,e=[0,0]:self.ln(rf,cf,rs,cs,v)if(rs>rf if abs(rf-rs)<abs(cf-cs)else cs>cf)else([asg(e,rs,1),asg(e,2*abs(rf-rs)-abs(cf-cs)),[[self.s(e[1],c,v),asg(e,e[1]+1,1),asg(e,e[0]+2*abs(rf-rs)-2*abs(cf-cs))]if 0<e[0]else[self.s(e[1],c,v),0,asg(e,e[0]+2*abs(rf-rs))]for c in range(cs,cf-1 if cs>cf else cf+1,-1 if cs>cf else 1)]]if abs(rf-rs)<abs(cf-cs)else[asg(e,cs,1),asg(e,2*abs(cf-cs)-abs(rf-rs)),[[self.s(r,e[1],v),asg(e,e[1]+1,1),asg(e,e[0]+2*abs(cf-cs)-2*abs(rf-rs))]if 0<e[0]else[self.s(r,e[1],v),0,asg(e,e[0]+2*abs(cf-cs))]for r in range(rs,rf-1 if rs>rf else rf+1,-1 if rs>rf else 1)]])),(lambda r,c,v:[asg(self.img,v,c+r*self.c)]if-1<r<self.r and-1<c<self.c else 0),(lambda:"P3 "+str(self.c)+" "+str(self.r)+" 255\n"+" ".join(str(round(i/65536))+" "+str(round(i/256)%256)+" "+str(i%256) for i in self.img))
class Etrx:
    def __init__(self,m=[]):
        self.m,self.e,self.oof,self.x,self.idm,self.c,self.hb=m[:],(lambda s,f:[self.m.append(i)for i in(*s,1,*f,1)]),(lambda:"\n".join(" ".join(("  "if i<10 else" "if i<100 else"")+str(i) for i in self.m[j::4]) for j in range(4))+"\n"),(lambda m:[self,[asg(self.m,e,i)for(i,e)in enumerate([sum(float(m[i%4+k*4])*self.m[i-(i%4)+k]for k in range(4))for i in range(len(self.m))])]][0]),(lambda:[asg(self.m,1.0 if i==j else 0.0,j+4*i)for j in range(4)for i in range(4)]if self.m else[self.m.append(1.0 if i==j else 0.0)for j in range(4)for i in range(4)]),(lambda x,y,z,r:[[self.e(*[[x+r*cos((t+d)/mx*2*pi),y+r*sin((t+d)/mx*2*pi),z]for d in(0,1)])for t in range(round(mx))]for mx in[40]]),(lambda xyxy,m:[[self.e(*[[(lambda a,t:sum(pow(t,3-i)*a[i]for i in range(4)))(Etrx([xyxy[2*i+k]for i in range(4)]).x(m).m,(h+d)/mx)for k in(0,1)]+[0]for d in(0,1)])for h in range(mx)]for mx in[20]])
(lambda m,edgm,filename:[[{"ident":(lambda:m.idm()),"line":(lambda:edgm.e([float(i)for i in b[1][:3]],[float(i)for i in b[1][3:]])),"circle":(lambda:edgm.c(*[float(i)for i in b[1]])),"hermite":(lambda:edgm.hb([float(i)for i in b[1]],(2,-3,0,1,-2,3,0,0,1,-2,1,0,1,-1,0,0))),"bezier":(lambda:edgm.hb([float(i)for i in b[1]],(-1,3,-3,1,3,-6,3,0,-3,3,0,0,1,0,0,0))),"box":(lambda: [edgm.e((float(b[1][0]),float(b[1][1]),float(b[1][2])),(float(b[1][0])+float(b[1][3]),float(b[1][1]),float(b[1][2]))),edgm.e((float(b[1][0]),float(b[1][1]),float(b[1][2])),(float(b[1][0]),float(b[1][1])-float(b[1][4]),float(b[1][2]))),edgm.e((float(b[1][0]),float(b[1][1]),float(b[1][2])),(float(b[1][0]),float(b[1][1]),float(b[1][2])-float(b[1][5]))),edgm.e((float(b[1][0])+float(b[1][3]),float(b[1][1])-float(b[1][4]),float(b[1][2])),(float(b[1][0]),float(b[1][1])-float(b[1][4]),float(b[1][2]))),edgm.e((float(b[1][0])+float(b[1][3]),float(b[1][1])-float(b[1][4]),float(b[1][2])),(float(b[1][0])+float(b[1][3]),float(b[1][1]),float(b[1][2]))),edgm.e((float(b[1][0])+float(b[1][3]),float(b[1][1])-float(b[1][4]),float(b[1][2])),(float(b[1][0])+float(b[1][3]),float(b[1][1])-float(b[1][4]),float(b[1][2])-float(b[1][5]))),edgm.e((float(b[1][0])+float(b[1][3]),float(b[1][1]),float(b[1][2])-float(b[1][5])),(float(b[1][0]),float(b[1][1]),float(b[1][2])-float(b[1][5]))),edgm.e((float(b[1][0])+float(b[1][3]),float(b[1][1]),float(b[1][2])-float(b[1][5])),(float(b[1][0])+float(b[1][3]),float(b[1][1]),float(b[1][2]))),edgm.e((float(b[1][0])+float(b[1][3]),float(b[1][1]),float(b[1][2])-float(b[1][5])),(float(b[1][0])+float(b[1][3]),float(b[1][1])-float(b[1][4]),float(b[1][2])-float(b[1][5]))),edgm.e((float(b[1][0]),float(b[1][1])-float(b[1][4]),float(b[1][2])-float(b[1][5])),(float(b[1][0]),float(b[1][1]),float(b[1][2])-float(b[1][5]))),edgm.e((float(b[1][0]),float(b[1][1])-float(b[1][4]),float(b[1][2])-float(b[1][5])),(float(b[1][0]),float(b[1][1])-float(b[1][4]),float(b[1][2]))),edgm.e((float(b[1][0]),float(b[1][1])-float(b[1][4]),float(b[1][2])-float(b[1][5])),(float(b[1][0])+float(b[1][3]),float(b[1][1])-float(b[1][4]),float(b[1][2])-float(b[1][5])))]),"sphere":(lambda:[edgm.e(p,[i+1 for i in p])for p in[[(float(b[1][0])+float(b[1][3])*cos(pi*j/k),float(b[1][1])+float(b[1][3])*sin(pi*j/k)*cos(2*pi*i/k),float(b[1][2])+float(b[1][3])*sin(pi*j/k)*sin(2*pi*i/k))for i in range(k)for j in range(k)]for k in[20]][0]]),"torus":(lambda:[edgm.e(p,[i+1 for i in p])for p in[[(float(b[1][0])+(float(b[1][3])*cos(2*pi*i/k)+float(b[1][4]))*cos(2*pi*j/k),float(b[1][1])+float(b[1][3])*sin(2*pi*i/k),float(b[1][0])+(float(b[1][3])*cos(2*pi*i/k)+float(b[1][4]))*sin(2*pi*j/k))for i in range(k)for j in range(k)]for k in[20]][0]]),"scale":(lambda:m.x((float(b[1][0]),0,0,0,0,float(b[1][1]),0,0,0,0,float(b[1][2]),0,0,0,0,1))),"move":(lambda:m.x((1,0,0,0,0,1,0,0,0,0,1,0,float(b[1][0]),float(b[1][1]),float(b[1][2]),1))),"rotate":(lambda:m.x({"x":(1,0,0,0,0,cos(float(b[1][1])/180*pi),sin(float(b[1][1])/-180*pi),0,0,sin(float(b[1][1])/180*pi),cos(float(b[1][1])/180*pi),0,0,0,0,1),"y":(cos(float(b[1][1])/180*pi),0,sin(float(b[1][1])/180*pi),0,0,1,0,0,sin(float(b[1][1])/-180*pi),0,cos(float(b[1][1])/180*pi),0,0,0,0,1),"z":(cos(float(b[1][1])/180*pi),sin(float(b[1][1])/-180*pi),0,0,sin(float(b[1][1])/180*pi),cos(float(b[1][1])/180*pi),0,0,0,0,1,0,0,0,0,1)}[b[1][0]])),"project":(lambda:m.x((1,0,0,0,0,1,0,0,0,0,0,0,0,0,1/float(b[1][0]),1))),"apply":(lambda:[edgm.x(m.m),m.idm()]),"clear":(lambda:edgm.m.clear()),"display":(lambda:[open("temp.ppm","w+").write(Img(500,500).lns(edgm.m).oof()),Popen(("display","temp.ppm"),stdin=PIPE,stdout=PIPE,stderr=PIPE).communicate(),Popen(("rm","temp.ppm"),stdin=PIPE,stdout=PIPE,stderr=PIPE).communicate()]),"save":(lambda:[open("temp2.ppm","w+").write(Img(500,500).lns(edgm.m).oof()),Popen(("convert","temp2.ppm",b[1][0]),stdin=PIPE,stdout=PIPE,stderr=PIPE).communicate(),Popen(("rm","temp2.ppm"),stdin=PIPE,stdout=PIPE,stderr=PIPE).communicate()])}[b[0]]()for b in[(e[0],(*tuple(fl),[])[i+1])for(i,e)in enumerate(fl)if e and e[0]in("ident","line","circle","hermite","bezier","box","sphere","torus","scale","move","rotate","project","apply","clear","display","save")]]for fl in[[k.split(" ")for k in open(filename,"r").read().split("\n")if k]]])(Etrx(),Etrx(),"stupid_dream.txt")
ident
torus
0 0 0 65 85
rotate
y 9
apply
ident
torus
0 0 0 65 85
rotate
x 90
move
250 250 0
apply
ident
bezier
21 200 63 144 77 132 87 123
bezier
21 199 12 212 6 223 -1 232
bezier
86 124 101 115 113 127 105 150
bezier
105 148 99 160 85 178 73 198
bezier
73 196 61 228 46 253 33 260
bezier
33 260 23 269 18 272 14 279
bezier
104 126 122 112 136 98 141 93
bezier
141 93 161 80 174 92 171 112
bezier
170 110 169 122 153 133 138 142
bezier
138 140 123 156 118 176 110 198
bezier
110 196 98 230 85 248 69 266
bezier
165 90 173 85 180 80 184 76
bezier
184 76 204 63 219 76 210 100
bezier
210 100 203 110 186 116 174 116
bezier
173 116 169 117 168 118 167 118
bezier
140 356 133 380 136 404 146 416
bezier
146 416 164 420 180 417 196 405
bezier
195 404 208 416 233 417 254 416
bezier
254 416 281 423 283 452 265 455
bezier
265 455 245 449 222 453 205 463
bezier
205 463 201 465 193 465 186 463
bezier
186 463 157 463 125 475 95 487
bezier
95 487 81 490 77 495 73 497
bezier
140 355 111 320 95 270 109 228
bezier
95 268 101 258 103 253 105 245
bezier
108 230 112 204 113 192 115 181
bezier
301 104 349 72 421 74 453 123
bezier
452 121 473 151 490 175 499 195
bezier
398 208 426 185 464 192 478 218
bezier
477 216 486 250 481 280 465 292
bezier
463 292 436 316 410 310 400 299
bezier
347 405 365 397 401 394 413 401
bezier
361 138 414 130 446 144 457 159
bezier
389 180 406 164 439 165 456 157
bezier
436 213 427 227 416 244 407 255
bezier
461 225 444 242 425 262 409 283
bezier
469 247 454 264 441 280 428 292
bezier
274 416 301 475 361 491 393 478
bezier
392 477 436 467 465 432 475 373
bezier
474 372 481 333 487 290 498 257
bezier
313 465 328 483 351 496 356 498
bezier
425 499 432 492 441 480 443 474
bezier
290 443 280 446 274 448 274 448
bezier
177 497 182 489 185 481 185 481
bezier
185 480 189 485 189 493 190 497
bezier
378 345 377 359 385 364 391 364
bezier
461 292 444 308 436 320 438 329
bezier
437 328 420 338 413 352 417 363
bezier
417 360 434 387 432 409 421 422
bezier
421 419 409 432 415 444 431 444
bezier
358 416 395 420 401 448 361 459
bezier
391 364 370 375 350 392 359 412
bezier
358 412 359 415 359 415 360 416
bezier
396 187 423 177 453 174 459 183
bezier
459 183 472 195 476 202 480 205
bezier
480 205 484 200 486 194 492 183
bezier
481 264 489 259 493 253 500 247
bezier
383 375 389 384 405 383 415 383
bezier
403 328 422 324 428 326 437 326
bezier
48 275 40 304 19 330 9 341
bezier
1 338 24 340 48 334 58 330
bezier
81 272 72 297 61 315 55 319
bezier
69 264 67 275 60 284 55 291
bezier
34 397 46 383 57 361 57 352
bezier
90 268 94 292 87 312 69 329
bezier
90 484 93 471 101 458 107 454
bezier
110 477 118 452 129 425 140 404
bezier
193 411 188 426 189 440 189 444
bezier
1 449 7 433 16 419 23 413
bezier
29 473 27 484 26 493 26 500
bezier
497 348 483 373 479 403 487 420
bezier
487 418 469 452 473 476 500 468
rotate
x 180
move
0 500 0
apply
display
save
stupid_dream.png
